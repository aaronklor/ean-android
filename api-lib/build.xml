<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright (c) 2013, Expedia Affiliate Network
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that redistributions of source code
    retain the above copyright notice, these conditions, and the following
    disclaimer. 

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
    ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

    The views and conclusions contained in the software and documentation are those
    of the authors and should not be interpreted as representing official policies, 
    either expressed or implied, of the Expedia Affiliate Network or Expedia Inc.
-->

<project name="ean-api-lib" default="all.jar">
    <property file="ant.properties" />

    <!-- Import the auxiliary ant files -->
    <import file="ivy.ant.xml" />
    <import file="checkstyle.ant.xml" />

    <property name="clover.jar" location="${lib.dir}/JUnit/clover-3.1.8.jar"/>
    <taskdef resource="cloverlib.xml" classpath="${clover.jar}"/>
    <taskdef resource="cloverjunitlib.xml" classpath="${clover.jar}"/>

    <path id="project.classpath">
        <fileset dir="${lib.dir}"/>
        <!-- include compiler output -->
        <pathelement path="${classes.dir}"/>
    </path>

    <presetdef name="copyright.year">
        <tstamp>
            <format property="copyrightYear" pattern="yyyy" />
        </tstamp>
    </presetdef>

    <presetdef name="main.javac">
        <javac debug="true"
               deprecation="true"
               classpathref="project.classpath"
               includeantruntime="false"
               target="1.6"
               source="1.6" />
    </presetdef>

    <target name="java.uptodate">
        <uptodate property="java.uptodate" targetfile="${dist.jar}">
            <srcfiles dir="${main.dir}" includes="**.*" />
        </uptodate>
    </target>

    <target name="test.uptodate">
        <uptodate property="test.uptodate" targetfile="${dist.jar}">
            <srcfiles dir="${testsrc.dir}" includes="**.*" />
        </uptodate>
    </target>

    <target name="compile"
            depends="java.uptodate, ivy.resolve.dependencies, checkstyle.check, checkstyle.check.warnings"
            unless="java.uptodate">
        <depend srcDir="${src.dir}"
                destDir="${build.dir}/"
                cache="${build.dir}/.depend"/>
        <mkdir dir="${classes.dir}"/>
        <main.javac destdir="${classes.dir}" >
            <src path="${main.dir}/java"/>
            <src path="${stubs.dir}" />
        </main.javac>
    </target>

    <target name="jar" depends="compile" unless="java.uptodate">
        <jar destfile="${dist.jar}" filesetmanifest="mergewithoutmain">
          <zipfileset dir="${classes.dir}" excludes="android/,**/*.iml"/>
        </jar>
    </target>

    <target name="jar.full" depends="compile, javadoc" unless="java.uptodate">
        <jar destfile="${dist.full.jar}" filesetmanifest="mergewithoutmain">
            <zipfileset dir="${classes.dir}" excludes="android/"/>
            <zipfileset dir="${doc.dir}" prefix="doc"/>
            <zipfileset dir="${main.dir}" prefix="src" excludes="**/*.iml" />
        </jar>
    </target>

    <target name="compile.test" depends="compile, test.uptodate" unless="test.uptodate">
        <mkdir dir="${tests.dir}"/>
        <main.javac destdir="${tests.dir}">
            <src path="${testsrc.dir}" />
        </main.javac>
        <copy todir="${tests.dir}" failonerror="false">
            <fileset dir="${testsrc.dir}/resources"/>
        </copy>
    </target>

    <target name="test" depends="compile, compile.test" unless="test.uptodate">
        <mkdir dir="${test.reports.dir}" />

        <junit printsummary="true"
               errorproperty="junit.error"
               failureproperty="junit.failure"
               haltonfailure="false"
               showoutput="true"
               fork="true">
            <classpath refid="project.classpath"/>
            <classpath location="${tests.dir}"/>
            <classpath location="${test.resource.dir}"/>

            <batchtest todir="${test.reports.dir}">
                <fileset dir="${tests.dir}" includes="**/*Test.*" />
            </batchtest>
            <formatter type="xml"/>
        </junit>

        <junitreport todir="${test.reports.dir}">
            <fileset dir="${test.reports.dir}">
                <include name="TEST-*.xml" />
            </fileset>
        </junitreport>
        <fail if="junit.failure" message="Junit tests failed. Please fix and rebuild" />
    </target>

    <target name="clean">
        <delete includeemptydirs="true">
            <fileset dir="${build.dir}" includes="**/*" excludes="*.jar" />
        </delete>
    </target>

    <target name="with.clover">
        <condition property="clover.license.found">
            <isset property="clover.license.path" />
        </condition>

        <!-- example: -Dclover.license.path=~/Developer/clover/lib/clover.license -->
        <fail unless="clover.license.found"
            message="Clover license not setup, please set -Dclover.license.path to the absolute path of the file and try again."/>
        <clover-setup/>
    </target>

    <target name="clover.report">
        <clover-report>
            <current outfile="${test.clover.reports.dir}" title="ean-android">
                <format type="html"/>
            </current>
            <current outfile="${test.clover.reports.dir}/coverage.xml">
                <format type="xml"/>
            </current>
        </clover-report>
    </target>

    <target name="instrumented.test" depends="clean, with.clover, test, clover.report" description="Runs build with clover instrumentation"/>

    <target name="javadoc" depends="java.uptodate" unless="java.uptodate">
        <mkdir dir="${doc.dir}"/>
        <copyright.year />
        <property name="javadoc.title" value="EAN Mobile ${ant.project.name} Docs"/>
        <javadoc
            destdir="${doc.dir}"
            author="false"
            version="false"
            use="true"
            windowtitle="${javadoc.title}"
            classpathref="project.classpath"
            failonerror="true"
            encoding="UTF-8"
            docencoding="UTF-8"
            verbose="false">
            <fileset dir="${src.dir}">
                <include name="**/*.java"/>
                <exclude name="stubs/" />
                <exclude name="test/" />
            </fileset>
            <doctitle><![CDATA[<h1>${javadoc.title}</h1>]]></doctitle>
            <bottom><![CDATA[<i>Copyright &#169; ${copyrightYear} EAN.com, L.P. All Rights Reserved.</i>]]></bottom>
        </javadoc>
    </target>

    <target name="all" depends="clean, compile, test" />

    <target name="all.jar" depends="all, jar, jar.full" />
</project>
